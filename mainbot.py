import subprocess

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
subprocess.check_call(["pip", "install", "python-telegram-bot==20.0"])
subprocess.check_call(["pip", "install", "nest_asyncio"])

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª:
# pip install telethon
# pip install python-telegram-bot==20.0

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, CallbackContext

# Your bot token
TOKEN = "8155499355:AAGm42KV9sfLhqNTEu6onJwURcMx5pUY81A"

# Define main menu buttons with emojis
menu_buttons = {
    "ru": [
        ["üíº –ö–æ—à–µ–ª–µ–∫", "üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã"],
        ["‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üí¨ –û—Ç–∑—ã–≤—ã"],
        ["üë®‚Äçüíº –ê–¥–º–∏–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ],
    "uz": [
        ["üíº Hamyon", "üë• Hamkorlar"],
        ["‚ÑπÔ∏è Ma'lumot", "üí¨ Sharhlar"],
        ["üë®‚Äçüíº Admin", "‚öôÔ∏è Sozlamalar"]
    ]
}

# Dictionary to store referral information and track registered users
user_referrals = {}
registered_users = set()  # Set to track unique users who have registered
user_languages = {}  # Dictionary to store user language preferences

# Welcome message and display buttons
async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    # Check if the user followed a referral link
    args = context.args
    if args:
        referrer_id = int(args[0])
        if user_id not in registered_users:
            registered_users.add(user_id)
            if referrer_id in user_referrals:
                user_referrals[referrer_id]["referrals_count"] += 1
            else:
                user_referrals[referrer_id] = {"referral_link": f"https://t.me/jbinvest_bot?start={referrer_id}", "referrals_count": 1}

            await context.bot.send_message(
                chat_id=referrer_id,
                text=f"–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_referrals[referrer_id]['referrals_count']}"
            )

    # Check if the user has already selected a language
    if user_id not in user_languages:
        # Ask for language selection
        language_buttons = [
            [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
            [InlineKeyboardButton("O'zbek", callback_data='lang_uz')]
        ]
        reply_markup = InlineKeyboardMarkup(language_buttons)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:",
            reply_markup=reply_markup
        )
    else:
        # Display the main menu
        language = user_languages[user_id]
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:" if language == 'ru' else "Xush kelibsiz! Iltimos, quyidagi menyudan variantni tanlang:",
            reply_markup=ReplyKeyboardMarkup(menu_buttons[language], resize_keyboard=True)
        )

# Handle language selection
async def language_selection(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    language = query.data.split('_')[1]
    user_languages[user_id] = language

    await query.answer()
    await query.edit_message_text(
        text="–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω! / Til tanlandi!"
    )

    # Display the main menu
    await query.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:" if language == 'ru' else "Xush kelibsiz! Iltimos, quyidagi menyudan variantni tanlang:",
        reply_markup=ReplyKeyboardMarkup(menu_buttons[language], resize_keyboard=True)
    )

# Function to handle the "–ö–æ—à–µ–ª–µ–∫" button
async def wallet(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')
    balance = 0
    keyboard = [
        [InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å" if language == 'ru' else "To'ldirish", callback_data='recharge')],
        [InlineKeyboardButton("–í—ã–≤–µ—Å—Ç–∏" if language == 'ru' else "Chiqarmoq", callback_data='withdraw')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} USD" if language == 'ru' else f"Balansingiz: {balance} USD", reply_markup=reply_markup
    )

# Function to handle the "–ü–æ–ø–æ–ª–Ω–∏—Ç—å" button
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å"
async def recharge(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    language = user_languages.get(user_id, 'ru')

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    link = "https://t.me/jb_investpulbot"
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.answer(
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: " + link if language == 'ru' 
        else "Balansni to'ldirish uchun quyidagi havolaga o'ting: " + link
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" if language == 'ru' else "Botga o'tish", url=link)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.callback_query.message.reply_text(
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:" if language == 'ru' 
        else "Balansni to'ldirish uchun quyidagi havolaga o'ting:", reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–µ—Å—Ç–∏"
async def withdraw(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    language = user_languages.get(user_id, 'ru')

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
    link = "https://t.me/jb_investpulbot"
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.answer(
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: " + link if language == 'ru' 
        else "Mablag'ni chiqarish uchun quyidagi havolaga o'ting: " + link
    )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞" if language == 'ru' else "Botga o'tish", url=link)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.callback_query.message.reply_text(
        "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:" if language == 'ru' 
        else "Mablag'ni chiqarish uchun quyidagi havolaga o'ting:", reply_markup=reply_markup
    )

# Function to handle the "–ü–∞—Ä—Ç–Ω–µ—Ä—ã" button with referral link generation and referral count display
async def partners(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')

    if user_id not in user_referrals:
        referral_link = f"https://t.me/jbinvest_bot?start={user_id}"
        user_referrals[user_id] = {
            "referral_link": referral_link,
            "referrals_count": 0
        }
    else:
        referral_link = user_referrals[user_id]["referral_link"]

    referrals_count = user_referrals[user_id]["referrals_count"]

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π" if language == 'ru' else "Do'stlarni taklif qilish", url=referral_link)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: {referrals_count}\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 5 –¥—Ä—É–∑–µ–π –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å!" if language == 'ru' else
        f"Sizning referal havolangiz: {referral_link}\n"
        f"Taklif qilingan do'stlar soni: {referrals_count}\n"
        f"Bonus olish uchun ushbu havola orqali 5 do'stni taklif qiling!",
        reply_markup=reply_markup
    )

# Function to handle the "–ê–¥–º–∏–Ω" button
async def admin(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')
    await update.message.reply_text(
        "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:" if language == 'ru' else "Admin bilan bog'lanish:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üë®‚Äçüíº –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É" if language == 'ru' else "üë®‚Äçüíº Admin bilan bog'lanish", url="https://t.me/RasulovJasur")]
        ])
    )

# Function to handle the "‚ÑπÔ∏è –ò–Ω—Ñ–æ" button
async def info(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')
    await update.message.reply_text(
        "–ú—ã ‚Äì –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, –≥–æ—Ç–æ–≤–∞—è –ø–æ–º–æ—á—å –≤–∞–º —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏. "
        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—á–Ω–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏! üí∞" if language == 'ru' else
        "Biz ‚Äì sarmoya bo'yicha mutaxassislar jamoasi, sizning pulingizni ko'paytirishga yordam berishga tayyormiz. "
        "Bizga qo'shiling va moliyaviy mustaqillikka birgalikda sayohatni boshlaymiz! üí∞"
    )

# Function to handle the "–û—Ç–∑—ã–≤—ã" button
async def reviews(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')
    await update.message.reply_text(
        "–ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:" if language == 'ru' else "Mijozlarimizning sharhlarini quyidagi havola orqali o'qing:",
        reply_markup=InlineKeyboardMarkup([InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º" if language == 'ru' else "üí¨ Sharhlarga o'tish", url="https://t.me/+bUndeuZTKPg2M2Uy")]
    )
    )

async def reviews(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')
    await update.message.reply_text(
        "–ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:" if language == 'ru' else "Mijozlarimizning sharhlarini quyidagi havola orqali o'qing:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ç–∑—ã–≤–∞–º" if language == 'ru' else "üí¨ Sharhlarga o'tish", url="https://t.me/+bUndeuZTKPg2M2Uy")]
        ])
    )


# Function to handle other menu buttons
async def menu_response(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')
    user_choice = update.message.text

    if user_choice == ("üíº –ö–æ—à–µ–ª–µ–∫" if language == 'ru' else "üíº Hamyon"):
        await wallet(update, context)
    elif user_choice == ("üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã" if language == 'ru' else "üë• Hamkorlar"):
        await partners(update, context)
    elif user_choice == ("‚ÑπÔ∏è –ò–Ω—Ñ–æ" if language == 'ru' else "‚ÑπÔ∏è Ma'lumot"):
        await info(update, context)
    elif user_choice == ("üí¨ –û—Ç–∑—ã–≤—ã" if language == 'ru' else "üí¨ Sharhlar"):
        await reviews(update, context)
    elif user_choice == ("üë®‚Äçüíº –ê–¥–º–∏–Ω" if language == 'ru' else "üë®‚Äçüíº Admin"):
        await admin(update, context)
    elif user_choice == ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" if language == 'ru' else "‚öôÔ∏è Sozlamalar"):
        await settings(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é." if language == 'ru' else "Iltimos, menyudan variantni tanlang.")


# Function to handle the "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" button
async def settings(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    language = user_languages.get(user_id, 'ru')

    # Ask for language selection
    language_buttons = [
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='lang_ru')],
        [InlineKeyboardButton("O'zbek", callback_data='lang_uz')]
    ]
    reply_markup = InlineKeyboardMarkup(language_buttons)
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:",
        reply_markup=reply_markup
    )

# Setting up the bot
async def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(language_selection, pattern='^lang_'))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_response))
    application.add_handler(CallbackQueryHandler(recharge, pattern='recharge'))
    application.add_handler(CallbackQueryHandler(withdraw, pattern='withdraw'))

    await application.run_polling()

import nest_asyncio
nest_asyncio.apply()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
