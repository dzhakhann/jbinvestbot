import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MainBot extends TelegramLongPollingBot {

    private static final String TOKEN = "8155499355:AAGm42KV9sfLhqNTEu6onJwURcMx5pUY81A";
    private static final String BOT_USERNAME = "jbinvest_bot";

    // Store user language preferences and referrals
    private Map<Long, String> userLanguages = new HashMap<>();
    private Map<Long, Integer> referralCounts = new HashMap<>();

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return TOKEN;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            if (messageText.equals("/start")) {
                sendLanguageSelection(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:");
            } else if (messageText.equals("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") || messageText.equals("‚öôÔ∏è Sozlamalar")) {
                sendLanguageSelection(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Iltimos, tilni tanlang:");
            } else {
                handleMenuSelection(chatId, messageText);
            }
        } else if (update.hasCallbackQuery()) {
            String data = update.getCallbackQuery().getData();
            long chatId = update.getCallbackQuery().getMessage().getChatId();

            if (data.equals("lang_ru")) {
                userLanguages.put(chatId, "ru");
                sendMainMenu(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:");
            } else if (data.equals("lang_uz")) {
                userLanguages.put(chatId, "uz");
                sendMainMenu(chatId, "Xush kelibsiz! Iltimos, quyidagi menyudan variantni tanlang:");
            }
        }
    }

    private void sendLanguageSelection(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

        InlineKeyboardButton buttonRu = new InlineKeyboardButton("–†—É—Å—Å–∫–∏–π");
        buttonRu.setCallbackData("lang_ru");
        InlineKeyboardButton buttonUz = new InlineKeyboardButton("O'zbek");
        buttonUz.setCallbackData("lang_uz");

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(buttonRu);
        row.add(buttonUz);

        buttons.add(row);
        inlineKeyboardMarkup.setKeyboard(buttons);
        message.setReplyMarkup(inlineKeyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMainMenu(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        ReplyKeyboardMarkup replyKeyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();

        String language = userLanguages.getOrDefault(chatId, "ru");
        if (language.equals("ru")) {
            keyboard.add(createKeyboardRow("üíº –ö–æ—à–µ–ª–µ–∫", "üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã"));
            keyboard.add(createKeyboardRow("‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üí¨ –û—Ç–∑—ã–≤—ã"));
            keyboard.add(createKeyboardRow("üë®‚Äçüíº –ê–¥–º–∏–Ω", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"));
        } else {
            keyboard.add(createKeyboardRow("üíº Hamyon", "üë• Hamkorlar"));
            keyboard.add(createKeyboardRow("‚ÑπÔ∏è Ma'lumot", "üí¨ Sharhlar"));
            keyboard.add(createKeyboardRow("üë®‚Äçüíº Admin", "‚öôÔ∏è Sozlamalar"));
        }

        replyKeyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(replyKeyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private KeyboardRow createKeyboardRow(String... buttons) {
        KeyboardRow row = new KeyboardRow();
        for (String button : buttons) {
            row.add(new KeyboardButton(button));
        }
        return row;
    }

    private void handleMenuSelection(long chatId, String messageText) {
        String language = userLanguages.getOrDefault(chatId, "ru");

        switch (messageText) {
            case "üíº –ö–æ—à–µ–ª–µ–∫":
            case "üíº Hamyon":
                sendWalletInfo(chatId, language);
                break;
            case "üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã":
            case "üë• Hamkorlar":
                sendReferralInfo(chatId, language);
                break;
            case "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
            case "‚ÑπÔ∏è Ma'lumot":
                sendInfo(chatId, language);
                break;
            case "üí¨ –û—Ç–∑—ã–≤—ã":
            case "üí¨ Sharhlar":
                sendReviews(chatId, language);
                break;
            case "üë®‚Äçüíº –ê–¥–º–∏–Ω":
            case "üë®‚Äçüíº Admin":
                sendAdminInfo(chatId, language);
                break;
        }
    }

    private void sendWalletInfo(long chatId, String language) {
        String text = language.equals("ru") ? "–í–∞—à –±–∞–ª–∞–Ω—Å: 0 USD" : "Balansingiz: 0 USD";
        sendSimpleMessage(chatId, text);
    }

    private void sendReferralInfo(long chatId, String language) {
        int referrals = referralCounts.getOrDefault(chatId, 0);
        String referralText = language.equals("ru") ? "–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: " + referrals : "Referallar soni: " + referrals;
        sendSimpleMessage(chatId, referralText);
    }

    private void sendInfo(long chatId, String language) {
        String text = language.equals("ru") ?
            "–ú—ã ‚Äì –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º, –≥–æ—Ç–æ–≤–∞—è –ø–æ–º–æ—á—å –≤–∞–º." :
            "Biz ‚Äì sarmoya bo'yicha mutaxassislar jamoasi.";
        sendSimpleMessage(chatId, text);
    }

    private void sendReviews(long chatId, String language) {
        String text = language.equals("ru") ?
            "–ß–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:" :
            "Mijozlarimizning sharhlarini o'qing:";
        sendSimpleMessage(chatId, text);
    }

    private void sendAdminInfo(long chatId, String language) {
        String text = language.equals("ru") ?
            "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:" :
            "Admin bilan bog'lanish:";
        sendSimpleMessage(chatId, text);
    }

    private void sendSimpleMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        try {
            TelegramBotsApi botsApi = new TelegramBotsApi(DefaultBotSession.class);
            botsApi.registerBot(new MainBot());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}
